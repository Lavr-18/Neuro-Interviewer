import logging
import os
import asyncio
from typing import Literal, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from openai import AsyncOpenAI
from openai.types.chat import (
    ChatCompletionSystemMessageParam,
    ChatCompletionUserMessageParam,
    ChatCompletionAssistantMessageParam
)
from dotenv import load_dotenv

load_dotenv()


openai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))


TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())


TEST_ROUNDS = 5



class TestStates(StatesGroup):
    choosing_position = State()
    confirming_readiness = State()
    in_test = State()
    answering = State()



position_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üßº –ì–æ—Ä–Ω–∏—á–Ω–∞—è", callback_data="position_maid")],
    [InlineKeyboardButton(text="üõé –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="position_admin")],
    [InlineKeyboardButton(text="üîß –¢–µ—Ö–ø–µ—Ä—Å–æ–Ω–∞–ª", callback_data="position_tech")]
])

ready_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç—É", callback_data="start_test")]
])


instruction_links = {
    "position_maid": [
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≥–æ—Ä–Ω–∏—á–Ω–æ–π - —á–∞—Å—Ç—å 1: https://docs.google.com/document/...",
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≥–æ—Ä–Ω–∏—á–Ω–æ–π - —á–∞—Å—Ç—å 2: https://docs.google.com/document/...",
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≥–æ—Ä–Ω–∏—á–Ω–æ–π - —á–∞—Å—Ç—å 3: https://docs.google.com/document/..."
    ],
    "position_admin": ["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: https://docs.google.com/document/..."],
    "position_tech": ["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ç–µ—Ö–ø–µ—Ä—Å–æ–Ω–∞–ª–∞: https://docs.google.com/document/..."]
}


class TestData:
    def __init__(self):
        self.questions = []
        self.answers = []
        self.results = []
        self.current_question = 0



@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        reply_markup=position_keyboard
    )
    await state.set_state(TestStates.choosing_position)
    await state.set_data({"test_data": TestData()})


@dp.callback_query(F.data.startswith("position_"))
async def choose_position(callback: CallbackQuery, state: FSMContext):
    position_key = callback.data
    await state.update_data(position=position_key)

    if position_key not in instruction_links:
        await callback.message.answer("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    instructions = instruction_links[position_key]
    instructions_text = "\n\n".join(instructions)

    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –≤–∞—à–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:\n\n"
        f"{instructions_text}\n\n"
        "–ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
        reply_markup=ready_keyboard
    )
    await state.set_state(TestStates.confirming_readiness)
    await callback.answer()



async def generate_question(instructions: list[str]) -> str:
    formatted_text = "\n\n".join(instructions)

    system_message = ChatCompletionSystemMessageParam(
        role="system",
        content=(
            "–¢—ã ‚Äî –Ω–µ–π—Ä–æ-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–µ–ª—è. "
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —á–µ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ "
            "–æ–¥–Ω–æ–≥–æ –∏–∑ –≤–∞–∂–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –§–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ."
        )
    )

    user_message = ChatCompletionUserMessageParam(
        role="user",
        content=f"–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n{formatted_text}\n\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É."
    )

    response = await openai_client.chat.completions.create(
        model="gpt-3.5-turbo",  # –∏–ª–∏ "gpt-4" –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        messages=[system_message, user_message],
        temperature=0.7,
        max_tokens=150
    )

    return response.choices[0].message.content



async def evaluate_answer(question: str, answer: str, instructions: list[str]) -> tuple[bool, str]:
    formatted_text = "\n\n".join(instructions)

    system_message = ChatCompletionSystemMessageParam(
        role="system",
        content=(
            "–¢—ã ‚Äî –Ω–µ–π—Ä–æ-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä. –û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. "
            "–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 'CORRECT: –¥–∞/–Ω–µ—Ç, COMMENT: —Ç–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'"
        )
    )

    user_message = ChatCompletionUserMessageParam(
        role="user",
        content=(
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n{formatted_text}\n\n"
            f"–í–æ–ø—Ä–æ—Å: {question}\n"
            f"–û—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {answer}\n\n"
            "–û—Ü–µ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
        )
    )

    response = await openai_client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[system_message, user_message],
        temperature=0.3,
        max_tokens=200
    )

    result_text = response.choices[0].message.content
    is_correct = "CORRECT: –¥–∞" in result_text.lower()
    comment = result_text.split("COMMENT:")[-1].strip()

    return is_correct, comment



@dp.callback_query(F.data == "start_test")
async def start_test(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    position_key = data.get("position")
    test_data: TestData = data.get("test_data")

    if position_key not in instruction_links:
        await callback.message.answer("–û—à–∏–±–∫–∞: –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    instructions = instruction_links[position_key]

    try:
        question = await generate_question(instructions)
        test_data.questions.append(question)
        await state.update_data(test_data=test_data)

        await callback.message.answer(f"–í–æ–ø—Ä–æ—Å 1/{TEST_ROUNDS}:\n\n{question}")
        await state.set_state(TestStates.in_test)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await callback.answer()



@dp.message(TestStates.in_test)
async def process_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    position_key = data.get("position")
    test_data: TestData = data.get("test_data")

    if position_key not in instruction_links:
        await message.answer("–û—à–∏–±–∫–∞: –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    current_question_idx = len(test_data.answers)
    if current_question_idx >= len(test_data.questions):
        await message.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    question = test_data.questions[current_question_idx]
    user_answer = message.text
    test_data.answers.append(user_answer)

    # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
    instructions = instruction_links[position_key]
    is_correct, comment = await evaluate_answer(question, user_answer, instructions)
    test_data.results.append(is_correct)

    await message.answer(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n"
        f"{'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ' if is_correct else '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
    if len(test_data.answers) >= TEST_ROUNDS:
        await finish_test(message, state, test_data)
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        try:
            next_question = await generate_question(instructions)
            test_data.questions.append(next_question)
            await state.update_data(test_data=test_data)

            await message.answer(
                f"–í–æ–ø—Ä–æ—Å {len(test_data.answers) + 1}/{TEST_ROUNDS}:\n\n"
                f"{next_question}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
            await state.clear()


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
async def finish_test(message: Message, state: FSMContext, test_data: TestData):
    correct_answers = sum(test_data.results)
    score = correct_answers / TEST_ROUNDS

    if score >= 0.8:
        result = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ"
    elif score >= 0.5:
        result = "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–æ–±—É—á–µ–Ω–∏–µ"
    else:
        result = "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = (
        f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{TEST_ROUNDS}\n\n"
        f"–î–µ—Ç–∞–ª–∏:\n"
    )

    for i, (question, answer, is_correct) in enumerate(zip(
            test_data.questions, test_data.answers, test_data.results
    ), 1):
        report += (
            f"\n{i}. {'‚úÖ' if is_correct else '‚ùå'}\n"
            f"–í–æ–ø—Ä–æ—Å: {question}\n"
            f"–û—Ç–≤–µ—Ç: {answer}\n"
        )

    await message.answer(report)

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É
    # save_results_to_db(message.from_user.id, test_data)

    await state.clear()


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())